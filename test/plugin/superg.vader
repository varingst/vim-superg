Before:
  let assert = {}

  function! assert.on(lnum) dict
    let self.lnum = a:lnum
    return self
  endfun

  function! assert.given(count) dict
    let self.count = a:count
    return self
  endfun

  function! assert.returns(lnum) dict
    let result = superg#(self.lnum, self.count)
    call vader#assert#true(
      \ a:lnum == result,
      \ printf('Expected line %d but got %d', a:lnum, result))
  endfun

  let lines = str2nr(getline(1))
  call append(1, repeat([getline(1)], lines-1))

  map gG <Plug>SuperG
  map <leader>$ <Plug>Super$
  map <leader>_ <Plug>Super_

Given:
  150 lines

Execute (superg#() should return closest matching line number):
  AssertEqual line('$'), 150
  call assert.on(123).given(9).returns(119)
  call assert.on(123).given(29).returns(129)
  call assert.on(123).given(129).returns(129)

Execute (superg#() should handle file boundaries):
  call assert.on(150).given(1).returns(141)
  call assert.on(1).given(9).returns(9)
  call assert.on(150).given(1000).returns(150)

Execute (superg#() should return current line number on non-positive count):
  call assert.on(150).given(0).returns(150)
  call assert.on(150).given(-1).returns(150)

Given:
  8 lines
  9th line
  10th line
  11th line

Do:
  9gG1gGdd8gGVggd

Expect (gG should move in normal mode):
  9th line
  10th line

Do:
  9gGV1gGd

Expect(gG should move in visual mode):
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines

Do:
  9gGd1gG

Expect(gG should move in operator mode):
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines
  8 lines

Do:
  9\$x01\$x8GVggdjx\$x

Expect (<leader>$ should move to end of closest line matching <count>$):
  9th lin
  0th lin
  11th lin

Do:
  9G$v1\$d8Gdgg

Expect (vmode <leader>$):
  9th lin

Do:
  9G$d1\$8Gdgg

Expect (omode <leader>$):
  9th lin

Do:
  9\_x$1\_x8GVggdj$x\_x

Expect (<leader>_ should move to start of closest line matching <count>$):
  th line
  0th lin
  1th line

Do:
  9G$v1\_d8Gdgg

Expect (vmode <leader>_):
  9th lin1th line

Do:
  9G$d1\_8Gdgg

Expect (omode <leader>_):
  9th lin1th line

Given:
  100 lines

Execute (should use fallback on 0 count):
  exe "normal 50gG"
  AssertEqual 50, line('.')
  exe "normal gG"
  AssertEqual 50, line('.')
  let g:superg_fallback = "dd"
  exe "normal gG"
  AssertEqual 99, line('$')

