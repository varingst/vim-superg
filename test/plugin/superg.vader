Before:
  let assert = {}

  function! assert.on(lnum) dict
    let self.lnum = a:lnum
    return self
  endfun

  function! assert.given(count) dict
    let self.count = a:count
    return self
  endfun

  function! assert.returns(lnum) dict
    let result = superg#(self.lnum, self.count)
    call vader#assert#true(
      \ a:lnum == result,
      \ printf('Expected line %d but got %d', a:lnum, result))
  endfun

  let lines = str2nr(getline(1))
  call append(1, repeat([getline(1)], lines-1))

  map gG <Plug>SuperG

Given:
  150 lines

Execute (superg#() should return closest matching line number):
  AssertEqual line('$'), 150
  call assert.on(123).given(9).returns(119)
  call assert.on(123).given(29).returns(129)
  call assert.on(123).given(129).returns(129)

Execute (superg#() should handle file boundaries):
  call assert.on(150).given(1).returns(141)
  call assert.on(1).given(9).returns(9)
  call assert.on(150).given(1000).returns(150)

Execute (superg#() should return current line number on non-positive count):
  call assert.on(150).given(0).returns(150)
  call assert.on(150).given(-1).returns(150)

Given:
  8 lines
  9th line
  10th line
  11th line

Do:
" move to line 9
  9gG
" 1gG moves to line 11
  1gG
" delete line 11
  dd
" delete line 1-8
  8gGdgg

Expect (SuperG should move in normal mode):
  9th line
  10th line

Do:
" move to line 9
  9gG
" visual linewise to line 11
  V1gG
" delete selection
  d
" move to line 7
  7gG
" visual linewise to line 1
  V1gG
" delete selection
  d


Expect(SuperG should move in visual mode):
  8 lines

Do:
" move to line 9
  9gG
" delete {to line 11}
  d1gG
" move to line 7
  7gG
" delete {to line 1}
  d1gG

Expect(SuperG should move in operator mode):
  8 lines

Given:
  100 lines

Execute (should use fallback on 0 count):
  exe "normal 50gG"
  AssertEqual 50, line('.')
  exe "normal gG"
  AssertEqual 50, line('.')
  let g:superg_fallback = "dd"
  exe "normal gG"
  AssertEqual 99, line('$')
