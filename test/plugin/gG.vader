Before:
  let assert = {}
  let g:gG_TESTING = 1

  function! assert.on(lnum) dict
    let self.lnum = a:lnum
    return self
  endfun

  function! assert.given(count) dict
    let self.count = a:count
    return self
  endfun

  function! assert.returns(lnum) dict
    let result = gG#G(self.lnum, self.count)
    call vader#assert#true(
      \ a:lnum == result,
      \ printf('Expected line %d but got %d', a:lnum, result))
  endfun

  function! assert.map(lhs) dict
    let self.map = a:lhs
    return self
  endfun

  function! assert.for_modes(modes) dict
    let self.modes = split(a:modes, '\zs')
    return self
  endfun

  function! assert.set_to(rhs) dict
    for mode in self.modes
      let result = maparg(self.map, mode)
      call vader#assert#true(
        \ result ==# a:rhs,
        \ printf("Expected '%s' in mode '%s' to be mapped to '%s'\nbut was: '%s'",
        \        self.map, mode, a:rhs, result))
    endfor
  endfun

  let lines = str2nr(getline(1))
  call append(1, repeat([getline(1)], lines-1))

After:
  unlet! g:gG_loaded

Given:
  150 lines

Execute (gG#() returns closest matching line number):
  AssertEqual line('$'), 150
  call assert.on(123).given(9).returns(119)
  call assert.on(123).given(29).returns(129)
  call assert.on(123).given(129).returns(129)

Execute (gG#() handles file boundaries):
  call assert.on(150).given(1).returns(141)
  call assert.on(1).given(9).returns(9)
  call assert.on(150).given(1000).returns(150)

Execute (gG#() returns current line number on non-positive count):
  call assert.on(150).given(0).returns(150)
  call assert.on(150).given(-1).returns(150)

Execute (mappings are set by default):
  call assert.map('gG').for_modes('nvo').set_to('gG#()')

Execute (mappings are set by default):
  call assert.map('<leader>$').for_modes('nvo').set_to("gG#N('j', 'k').'$'")

Execute (mappings are set by default):
  call assert.map('<leader>$').for_modes('nvo').set_to("gG#N('j', 'k').'$'")

Execute (no reload):
  runtime gG.vim

Execute (gG#N() returns delta):
  call gG#N('foo', 'bar')
  echo gG#modefmt('foo')
  echo gG#()

